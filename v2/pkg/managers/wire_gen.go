// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package managers

import (
	"github.com/redhat-marketplace/redhat-marketplace-operator/v2/pkg/runnables"
	"github.com/redhat-marketplace/redhat-marketplace-operator/v2/pkg/utils/reconcileutils"
	"k8s.io/client-go/kubernetes"
)

import (
	_ "k8s.io/client-go/plugin/pkg/client/auth"
)

// Injectors from wire.go:

func initializeRunnables(fields *ControllerFields, namespace DeployedNamespace) (runnables.Runnables, error) {
	logger := fields.Logger
	config := fields.Config
	clientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		return nil, err
	}
	client := fields.Client
	scheme := fields.Scheme
	clientCommandRunner := reconcileutils.NewClientCommand(client, scheme, logger)
	podMonitorConfig := ProvidePodMonitorConfig(namespace)
	podMonitor := runnables.NewPodMonitor(logger, clientset, clientCommandRunner, podMonitorConfig)
	runnablesRunnables := runnables.ProvideRunnables(podMonitor)
	return runnablesRunnables, nil
}

func initializeCommandRunner(fields *ControllerFields) (reconcileutils.ClientCommandRunner, error) {
	client := fields.Client
	scheme := fields.Scheme
	logger := fields.Logger
	clientCommandRunner := reconcileutils.NewClientCommand(client, scheme, logger)
	return clientCommandRunner, nil
}
