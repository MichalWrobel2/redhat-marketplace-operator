// Copyright 2020 IBM Corp.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/redhat-marketplace/redhat-marketplace-operator/pkg/config"
	"github.com/redhat-marketplace/redhat-marketplace-operator/pkg/controller"
	"github.com/redhat-marketplace/redhat-marketplace-operator/pkg/managers"
	"github.com/redhat-marketplace/redhat-marketplace-operator/pkg/utils/reconcileutils"
	config2 "sigs.k8s.io/controller-runtime/pkg/client/config"
)

// Injectors from wire.go:

func InitializeMarketplaceController() (*managers.ControllerMain, error) {
	controllerFlagSet := controller.ProvideControllerFlagSet()
	defaultCommandRunnerProvider := reconcileutils.ProvideDefaultCommandRunnerProvider()
	marketplaceController := controller.ProvideMarketplaceController(defaultCommandRunnerProvider)
	meterbaseController := controller.ProvideMeterbaseController(defaultCommandRunnerProvider)
	meterDefinitionController := controller.ProvideMeterDefinitionController(defaultCommandRunnerProvider)
	razeeDeployController := controller.ProvideRazeeDeployController()
	olmSubscriptionController := controller.ProvideOlmSubscriptionController()
	operatorConfig, err := config.ProvideConfig()
	if err != nil {
		return nil, err
	}
	meterReportController := controller.ProvideMeterReportController(defaultCommandRunnerProvider, operatorConfig)
	olmClusterServiceVersionController := controller.ProvideOlmClusterServiceVersionController()
	remoteResourceS3Controller := controller.ProvideRemoteResourceS3Controller()
	nodeController := controller.ProvideNodeController()
	controllerList := controller.ProvideControllerList(marketplaceController, meterbaseController, meterDefinitionController, razeeDeployController, olmSubscriptionController, meterReportController, olmClusterServiceVersionController, remoteResourceS3Controller, nodeController)
	restConfig, err := config2.GetConfig()
	if err != nil {
		return nil, err
	}
	opsSrcSchemeDefinition := controller.ProvideOpsSrcScheme()
	monitoringSchemeDefinition := controller.ProvideMonitoringScheme()
	olmV1SchemeDefinition := controller.ProvideOLMV1Scheme()
	olmV1Alpha1SchemeDefinition := controller.ProvideOLMV1Alpha1Scheme()
	openshiftConfigV1SchemeDefinition := controller.ProvideOpenshiftConfigV1Scheme()
	localSchemes := controller.ProvideLocalSchemes(opsSrcSchemeDefinition, monitoringSchemeDefinition, olmV1SchemeDefinition, olmV1Alpha1SchemeDefinition, openshiftConfigV1SchemeDefinition)
	scheme, err := managers.ProvideScheme(restConfig, localSchemes)
	if err != nil {
		return nil, err
	}
	options, err := provideOptions(scheme)
	if err != nil {
		return nil, err
	}
	manager, err := managers.ProvideManager(restConfig, scheme, localSchemes, options)
	if err != nil {
		return nil, err
	}
	controllerMain := makeMarketplaceController(controllerFlagSet, controllerList, manager)
	return controllerMain, nil
}
