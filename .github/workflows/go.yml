name: Test & Deploy Image

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop
      - release/**
      - hotfix/**

env:
  pushImage: true
  #IMAGE_REGISTRY: quay.io/zach-source
  #IMAGE_REGISTRY: quay.io/rh-marketplace

jobs:
  build:
    name: Test
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.vars.outputs.version }}
      tag: ${{ steps.vars.outputs.tag }}
      hash: ${{ steps.vars.outputs.hash }}
      tagExists: ${{ steps.checktag.outputs.exists }}

    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get Vars
        id: vars
        run: |
          echo "::set-output name=version::$(make current-version)"
          echo "::set-output name=tag::sha-$(git rev-parse --short HEAD)"
          echo "::set-output name=hash::$(make current-version)-${FILEHASH:0:6}"
        env:
          FILEHASH: ${{ hashFiles('build/**', 'assets/**', 'cmd/**', 'pkg/**', 'version/**', 'go.sum', 'go.mod') }}

      - name: Get dependencies
        run: |
          go mod download

      - name: Test
        run: make test

      - name: Check if tag exists
        id: checktag
        shell: bash {0}
        run: |
          skopeo inspect docker://${TAG} > /dev/null
          [[ $? == 0 ]] && echo ::set-output name=exists::true || echo ::set-output name=exists::false
        env:
          TAG: quay.io/rh-marketplace/redhat-marketplace-operator:${{ steps.vars.outputs.hash }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        registry:
          - 'quay.io/rh-marketplace'
        include:
          - registry: quay.io/rh-marketplace
            name: quay
            key: quayUser
            value: quayPassword
    env:
      OPERATOR_IMAGE: ${{ matrix.registry }}/redhat-marketplace-operator:${{ needs.build.outputs.hash }}
      TAG: ${{ matrix.registry }}/redhat-marketplace-operator:${{ needs.build.outputs.hash }}
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Build
        run: make build

      - name: Login ${{ matrix.name }}
        run: make docker-login
        env:
          DOCKER_USER: ${{ secrets[matrix.key] }}
          DOCKER_PASSWORD: ${{ secrets[matrix.value] }}
          REGISTRY: ${{ matrix.registry }}

      - name: Check if tag exists
        id: image
        shell: bash {0}
        run: |
          skopeo inspect docker://${TAG} > /dev/null
          [[ $? == 0 ]] && echo ::set-env name=exists::true || echo ::set-env name=exists::false

      - name: Deploy ${{ matrix.name }}
        if: env.exists != 'true' && env.pushImage == 'true'
        run: make push
  tag:
    name: Tag
    runs-on: ubuntu-latest
    needs: [build, deploy]
    strategy:
      matrix:
        registry:
          - 'scan.connect.redhat.com/ospid-c93f69b6-cb04-437b-89d6-e5220ce643cd'
        include:
          - registry: scan.connect.redhat.com/ospid-c93f69b6-cb04-437b-89d6-e5220ce643cd
            fromRegistry: quay.io/rh-marketplace
            name: PC
            key: pcUser
            value: pcPassword
    env:
      FROM_OPERATOR_IMAGE: ${{ matrix.fromRegistry }}/redhat-marketplace-operator:${{ needs.build.outputs.hash }}
      TO_OPERATOR_IMAGE: ${{ matrix.registry }}/redhat-marketplace-operator:${{ needs.build.outputs.hash }}
      TAG: ${{ matrix.registry }}/redhat-marketplace-operator:${{ needs.build.outputs.hash }}
    steps:
      - name: Check if tag exists
        id: image
        shell: bash {0}
        run: |
          skopeo inspect docker://${TAG} --creds ${{ secrets[matrix.key] }}:${{ secrets[matrix.value] }} > /dev/null
          [[ $? == 0 ]] && echo ::set-env name=exists::true || echo ::set-env name=exists::false

      - name: Copy ${{ matrix.name }}
        if: env.exists != 'true' && env.pushImage == 'true'
        run: |
          skopeo copy "docker://${FROM_OPERATOR_IMAGE}" "docker://${TO_OPERATOR_IMAGE}" --dest-creds ${{ secrets[matrix.key] }}:${{ secrets[matrix.value] }}
