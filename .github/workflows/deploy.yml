name: Deploy Image

on:
  push:
    branches:
      - "master"
      - "release/**"
      - "hotfix/**"
      - "develop"
      - "feature/**"
      - "bugfix/**"
env:
  pushImage: true

jobs:
  build:
    name: Test
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.vars.outputs.version }}
      tag: ${{ steps.vars.outputs.tag }}
      hash: ${{ steps.vars.outputs.hash }}
      tagExists: ${{ steps.checktag.outputs.exists }}
      dockertag: ${{ steps.vars.outputs.dockertag }}
      crs: ${{ steps.vars.outputs.crs }}
      gittagpushed: ${{ steps.tag.outputs.gittagpushed }}
    env:
      TAGPREFIX: ''

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ github.token }}

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15
        id: go

      - name: Set branch prefix for dev
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        run: |
          echo "::set-env name=TAGPREFIX::dev-"

      - name: Set branch prefix for fix
        if: github.event_name == 'push' && startsWith(github.ref,'refs/heads/bugfix/')
        run: |
          NAME=$(echo "${{ github.ref }}" | sed 's/refs\/heads\/bugfix\///')
          echo "::set-env name=TAGPREFIX::bugfix-${NAME}-"

      - name: Set branch prefix for feat
        if: github.event_name == 'push' && startsWith(github.ref,'refs/heads/feature/')
        run: |
          NAME=$(echo "${{ github.ref }}" | sed 's/refs\/heads\/feature\///')
          echo "::set-env name=TAGPREFIX::feat-${NAME}-"

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get if gittag is pushed
        shell: bash {0}
        id: tag
        run: |
          VERSION=$(make current-version)
          RESULT=$(git tag --list | grep -E "$VERSION")
          IS_TAGGED=false
          if [ "$RESULT" != "" ] ; then
            IS_TAGGED=true
          fi

      - name: Get Vars
        id: vars
        run: |

          echo "::set-output name=gittagpushed::${IS_TAGGED}"
          echo "::set-output name=version::$(make current-version)"
          echo "::set-output name=tag::sha-$(git rev-parse --short HEAD)"
          echo "::set-output name=hash::$(make current-version)-${FILEHASH:0:6}"
          echo "::set-output name=dockertag::${TAGPREFIX}$(make current-version)-${FILEHASH:0:6}"
        env:
          FILEHASH: ${{ hashFiles('cmd/**', 'pkg/**', 'interal/**', 'version/**', 'go.sum', 'go.mod') }}

      - name: Get dependencies
        run: |
          go mod download

      - name: Test
        env:
          KUBEBUILDER_ATTACH_CONTROL_PLANE_OUTPUT: true
        run: |
          make install-tools test-ci

      - name: Turnstyle
        uses: softprops/turnstyle@v1
        with:
          continue-after-seconds: 30
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if tag exists
        id: checktag
        shell: bash {0}
        run: |
          skopeo inspect docker://${TAG} > /dev/null
          [[ $? == 0 ]] && echo ::set-output name=exists::true || echo ::set-output name=exists::false
        env:
          TAG: quay.io/rh-marketplace/redhat-marketplace-operator:${{ steps.vars.outputs.dockertag }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ needs.build.outputs.gittagpushed != 'true' }}
    strategy:
      matrix:
        registry:
          - 'quay.io/rh-marketplace'
        include:
          - registry: quay.io/rh-marketplace
            name: quay
            key: quayUser
            value: quayPassword
    env:
      IMAGE_REGISTRY: ${{ matrix.registry }}
      OPERATOR_IMAGE: ${{ matrix.registry }}/redhat-marketplace-operator:${{ needs.build.outputs.dockertag }}
      OPERATOR_IMAGE_TAG: ${{ needs.build.outputs.dockertag }}
      TAG: ${{ matrix.registry }}/redhat-marketplace-operator:${{ needs.build.outputs.dockertag}}
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Turnstyle
        uses: softprops/turnstyle@v1
        with:
          continue-after-seconds: 30
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if tag exists
        id: image
        shell: bash {0}
        run: |
          skopeo inspect docker://${TAG} --creds ${{ secrets[matrix.key] }}:${{ secrets[matrix.value] }} > /dev/null
          [[ $? == 0 ]] && echo ::set-env name=exists::true || echo ::set-env name=exists::false


      - name: Install skaffold
        run: |
          cd /tmp
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/${SKAFFOLD_VERSION}/skaffold-linux-amd64 && \
          sudo install skaffold /usr/local/bin/
          echo "::add-path::/usr/local/bin"
        env:
          SKAFFOLD_VERSION: v1.13.1

      - name: Login ${{ matrix.name }}
        run: make docker-login
        env:
          DOCKER_USER: ${{ secrets[matrix.key] }}
          DOCKER_PASSWORD: ${{ secrets[matrix.value] }}
          REGISTRY: ${{ matrix.registry }}

      - name: Build
        if: env.exists != 'true'
        run: make build

  opm:
    name: Deploy OPM Index
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ needs.build.outputs.gittagpushed != 'true' }}
    strategy:
      matrix:
        registry:
          - 'quay.io/rh-marketplace'
        include:
          - registry: quay.io/rh-marketplace
            name: quay
            key: quayUser
            value: quayPassword
    env:
      IMAGE_REGISTRY: ${{ matrix.registry }}
      OPERATOR_IMAGE: ${{ matrix.registry }}/redhat-marketplace-operator:${{ needs.build.outputs.dockertag }}
      OLM_REPO: ${{ matrix.registry }}/operator-manifest
      OLM_BUNDLE_REPO: ${{ matrix.registry }}/operator-manifest-bundle
      TAG: ${{ needs.build.outputs.dockertag }}
      OPERATOR_IMAGE_TAG: ${{ needs.build.outputs.dockertag }}
      VERSION: ${{ needs.build.outputs.version }}
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
        id: go

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Install operator-sdk
        run: |
          make install-tools
          cd /tmp
          curl -LO https://github.com/operator-framework/operator-sdk/releases/download/${RELEASE_VERSION}/operator-sdk-${RELEASE_VERSION}-x86_64-linux-gnu
          chmod +x operator-sdk-${RELEASE_VERSION}-x86_64-linux-gnu && sudo mkdir -p /usr/local/bin/ && sudo cp operator-sdk-${RELEASE_VERSION}-x86_64-linux-gnu /usr/local/bin/operator-sdk && rm operator-sdk-${RELEASE_VERSION}-x86_64-linux-gnu
          python -m pip install --upgrade pip
          pip3 install -Iv operator-courier==$COURIER_VERSION
          curl -LO https://github.com/operator-framework/operator-registry/releases/download/${OPM_VERSION}/linux-amd64-opm
          chmod +x linux-amd64-opm && sudo cp linux-amd64-opm /usr/local/bin/opm && rm linux-amd64-opm
          echo "::add-path::/usr/local/bin"
          sudo apt-get install -y sed
          sudo snap install yq
        env:
          RELEASE_VERSION: v0.18.0
          OPM_VERSION: v1.12.5
          COURIER_VERSION: 2.1.7

      - name: Login ${{ matrix.name }}
        run: make docker-login
        env:
          DOCKER_USER: ${{ secrets[matrix.key] }}
          DOCKER_PASSWORD: ${{ secrets[matrix.value] }}
          REGISTRY: ${{ matrix.registry }}

      - name: Build bundles
        run: |
          make generate-csv opm-bundle-last-beta opm-index-base
          yq w ./deploy/olm-catalog/test-registry.yaml spec.image "${OLM_BUNDLE_REPO}:${TAG}" > ./test-registry-${TAG}.yaml

      - name: Upload results
        uses: actions/upload-artifact@v1
        with:
          name: test-catalog-source
          path: ./test-registry-${{ env.TAG }}.yaml

  tag:
    name: Push other tags
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: |
      github.event_name == 'push'
      && (startsWith(github.ref,'refs/heads/release/')
          || startsWith(github.ref,'refs/heads/hotfix/')
          || github.ref == 'refs/heads/master' )
    strategy:
      matrix:
        image:
          - redhat-marketplace-operator
          - redhat-marketplace-reporter
          - redhat-marketplace-metric-state
        include:
          - image: redhat-marketplace-operator
            registry: scan.connect.redhat.com/ospid-c93f69b6-cb04-437b-89d6-e5220ce643cd
            fromRegistry: quay.io/rh-marketplace
            name: PC
            key: pcUser
            value: pcPassword
          - image: redhat-marketplace-reporter
            registry: scan.connect.redhat.com/ospid-faa0f295-e195-4bcc-a3fc-a4b97ada317e
            fromRegistry: quay.io/rh-marketplace
            name: PC
            key: pcUser
            value: pcPasswordReporter
          - image: redhat-marketplace-metric-state
            registry: scan.connect.redhat.com/ospid-9b9b0dbe-7adc-448e-9385-a556714a09c4
            fromRegistry: quay.io/rh-marketplace
            name: PC
            key: pcUser
            value: pcPasswordMetricState
    env:
      FROM_OPERATOR_IMAGE: ${{ matrix.fromRegistry }}/${{ matrix.image }}:${{ needs.build.outputs.dockertag }}
      TO_OPERATOR_IMAGE: ${{ matrix.registry }}/${{ matrix.image }}:${{ needs.build.outputs.dockertag }}
      TAG: ${{ matrix.registry }}/${{ matrix.image }}:${{ needs.build.outputs.dockertag }}
    steps:
      - name: Check if tag exists in ${{ matrix.name }}
        id: image
        shell: bash {0}
        run: |
          skopeo inspect docker://${TAG} --creds ${{ secrets[matrix.key] }}:${{ secrets[matrix.value] }} > /dev/null
          [[ $? == 0 ]] && echo ::set-env name=exists::true || echo ::set-env name=exists::false

      - name: Copy ${{ matrix.image }} to ${{ matrix.name }}
        if: env.exists != 'true' && env.pushImage == 'true'
        run: |
          skopeo copy "docker://${FROM_OPERATOR_IMAGE}" "docker://${TO_OPERATOR_IMAGE}" --dest-creds ${{ secrets[matrix.key] }}:${{ secrets[matrix.value] }}
