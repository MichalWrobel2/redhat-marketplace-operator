name: Deploy Image

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master

env:
  pushImage: true
  TAGPREFIX: ""

jobs:
  build:
    name: Test
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.vars.outputs.version }}
      tag: ${{ steps.vars.outputs.tag }}
      hash: ${{ steps.vars.outputs.hash }}
      tagExists: ${{ steps.checktag.outputs.exists }}

    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
        id: go

      - name: Set branch prefix for dev
        if: github.event == 'push' && github.ref == 'develop'
        run: |
          echo "::set-env name=TAGPREFIX::dev-"

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get Vars
        id: vars
        run: |
          echo "::set-output name=version::$(make current-version)"
          echo "::set-output name=tag::sha-$(git rev-parse --short HEAD)"
          echo "::set-output name=hash::$(make current-version)-${FILEHASH:0:6}"
          echo "::set-output name=dockertag::${TAGPREFIX}$(make current-version)-${FILEHASH:0:6}"
        env:
          FILEHASH: ${{ hashFiles('build/**', 'assets/**', 'cmd/**', 'pkg/**', 'version/**', 'go.sum', 'go.mod') }}

      - name: Get dependencies
        run: |
          go mod download

      - name: Test
        run: make test

      - name: Check if tag exists
        id: checktag
        shell: bash {0}
        run: |
          skopeo inspect docker://${TAG} > /dev/null
          [[ $? == 0 ]] && echo ::set-output name=exists::true || echo ::set-output name=exists::false
        env:
          TAG: quay.io/rh-marketplace/redhat-marketplace-operator:${{ steps.vars.outputs.dockertag }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        registry:
          - 'quay.io/rh-marketplace'
        include:
          - registry: quay.io/rh-marketplace
            name: quay
            key: quayUser
            value: quayPassword
    env:
      OPERATOR_IMAGE: ${{ matrix.registry }}/redhat-marketplace-operator:${{ needs.build.outputs.dockertag }}
      TAG: ${{ matrix.registry }}/redhat-marketplace-operator:${{ needs.build.outputs.dockertag}}
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Check if tag exists
        id: image
        shell: bash {0}
        run: |
          skopeo inspect docker://${TAG} --creds ${{ secrets[matrix.key] }}:${{ secrets[matrix.value] }} > /dev/null
          [[ $? == 0 ]] && echo ::set-env name=exists::true || echo ::set-env name=exists::false

      - name: Build
        if: env.exists != 'true'
        run: make build

      - name: Login ${{ matrix.name }}
        run: make docker-login
        env:
          DOCKER_USER: ${{ secrets[matrix.key] }}
          DOCKER_PASSWORD: ${{ secrets[matrix.value] }}
          REGISTRY: ${{ matrix.registry }}

      - name: Deploy ${{ matrix.name }}
        if: env.exists != 'true' && env.pushImage == 'true'
        run: make push

  opm:
    name: Deploy OPM Index
    runs-on: ubuntu-latest
    if:
    needs: [build]
    strategy:
      matrix:
        registry:
          - 'quay.io/rh-marketplace'
        include:
          - registry: quay.io/rh-marketplace
            name: quay
            key: quayUser
            value: quayPassword
    env:
      OPERATOR_IMAGE: ${{ matrix.registry }}/redhat-marketplace-operator:${{ needs.build.outputs.dockertag }}
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Install operator-sdk
        run: |
          cd /tmp
          curl -LO https://github.com/operator-framework/operator-sdk/releases/download/${RELEASE_VERSION}/operator-sdk-${RELEASE_VERSION}-x86_64-linux-gnu
          chmod +x operator-sdk-${RELEASE_VERSION}-x86_64-linux-gnu && sudo mkdir -p /usr/local/bin/ && sudo cp operator-sdk-${RELEASE_VERSION}-x86_64-linux-gnu /usr/local/bin/operator-sdk && rm operator-sdk-${RELEASE_VERSION}-x86_64-linux-gnu
          python -m pip install --upgrade pip
          pip3 install operator-courier
          curl https://github.com/operator-framework/operator-registry/releases/download/${OPM_VERSION}/linux-amd64-opm -o opm
          chmod +x ./opm && sudo cp ./opm /usr/local/bin/opm
          echo "::add-path::/usr/local/bin"
        env:
          RELEASE_VERSION: v0.18.0
          OPM_VERSION: v1.12.5

      - name: Login ${{ matrix.name }}
        run: make docker-login
        env:
          DOCKER_USER: ${{ secrets[matrix.key] }}
          DOCKER_PASSWORD: ${{ secrets[matrix.value] }}
          REGISTRY: ${{ matrix.registry }}

      - name: Build bundles
        run: |
          make generate-csv olm-bundle-last-beta opm-index-base

  tag:
    name: Push other tags
    runs-on: ubuntu-latest
    needs: [build, deploy]
    strategy:
      matrix:
        registry:
          - 'scan.connect.redhat.com/ospid-c93f69b6-cb04-437b-89d6-e5220ce643cd'
        include:
          - registry: scan.connect.redhat.com/ospid-c93f69b6-cb04-437b-89d6-e5220ce643cd
            fromRegistry: quay.io/rh-marketplace
            name: PC
            key: pcUser
            value: pcPassword
    env:
      FROM_OPERATOR_IMAGE: ${{ matrix.fromRegistry }}/redhat-marketplace-operator:${{ needs.build.outputs.dockertag }}
      TO_OPERATOR_IMAGE: ${{ matrix.registry }}/redhat-marketplace-operator:${{ needs.build.outputs.dockertag }}
      TAG: ${{ matrix.registry }}/redhat-marketplace-operator:${{ needs.build.outputs.dockertag }}
    steps:
      - name: Check if tag exists
        id: image
        shell: bash {0}
        run: |
          skopeo inspect docker://${TAG} --creds ${{ secrets[matrix.key] }}:${{ secrets[matrix.value] }} > /dev/null
          [[ $? == 0 ]] && echo ::set-env name=exists::true || echo ::set-env name=exists::false

      - name: Copy ${{ matrix.name }}
        if: env.exists != 'true' && env.pushImage == 'true'
        run: |
          skopeo copy "docker://${FROM_OPERATOR_IMAGE}" "docker://${TO_OPERATOR_IMAGE}" --dest-creds ${{ secrets[matrix.key] }}:${{ secrets[matrix.value] }}

  scorecard:
    name: Scorecard for ${{ matrix.cr }}
    runs-on: ubuntu-latest
    depends-on: [deploy]
    continue-on-error: true
    env:
      OPERATOR_IMAGE: quay.io/rh-marketplace/redhat-marketplace-operator:${{ needs.build.outputs.dockertag }}
    strategy:
      matrix:
        cr:
          - "marketplace.redhat.com_v1alpha1_marketplaceconfig_cr.yaml"
          - "marketplace.redhat.com_v1alpha1_meterbase_cr.yaml"
          - "marketplace.redhat.com_v1alpha1_meterdefinition_cr.yaml"
          - "marketplace.redhat.com_v1alpha1_razeedeployment_cr.yaml"
    steps:

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
        id: go

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - uses: engineerd/setup-kind@v0.3.0

      - name: Checking cluster info
        run: |
          kubectl cluster-info
          echo "current-context:" $(kubectl config current-context)
          echo "environment-kubeconfig:" ${KUBECONFIG}

      - name: Get Vars
        id: vars
        run: |
          echo "::set-output name=version::$(make current-version)"
          echo "::set-output name=tag::sha-$(git rev-parse --short HEAD)"
          echo "::set-output name=hash::$(make current-version)-${FILEHASH:0:6}"
        env:
          FILEHASH: ${{ hashFiles('build/**', 'assets/**', 'cmd/**', 'pkg/**', 'version/**', 'go.sum', 'go.mod') }}

      - name: Install operator-sdk
        run: |
          cd /tmp
          curl -LO https://github.com/operator-framework/operator-sdk/releases/download/${RELEASE_VERSION}/operator-sdk-${RELEASE_VERSION}-x86_64-linux-gnu
          chmod +x operator-sdk-${RELEASE_VERSION}-x86_64-linux-gnu && sudo mkdir -p /usr/local/bin/ && sudo cp operator-sdk-${RELEASE_VERSION}-x86_64-linux-gnu /usr/local/bin/operator-sdk && rm operator-sdk-${RELEASE_VERSION}-x86_64-linux-gnu
          python -m pip install --upgrade pip
          pip3 install operator-courier
          sudo snap install yq
          echo "::add-path::/usr/local/bin"
        env:
          RELEASE_VERSION: v0.18.0

      - name: Run scorecard
        continue-on-error: true
        run: |
          echo "Updating osdk to version ${VERSION}"
          make generate-csv
          yq w -i .osdk-scorecard.yaml 'scorecard.plugins.*.*.csv-path' deploy/olm-catalog/redhat-marketplace-operator/${VERSION}/redhat-marketplace-operator.v${VERSION}.clusterserviceversion.yaml
          kubectl create ns openshift-redhat-marketplace
          kubectl config set-context --current --namespace=openshift-redhat-marketplace
          kubectl apply -f deploy/role.yaml -f deploy/service_account.yaml -f deploy/role_binding.yaml

          yq w -i .osdk-scorecard.yaml 'scorecard.plugins.*.*.cr-manifests' deploy/crds/${{ matrix.cr  }}
          operator-sdk scorecard -b ./deploy/olm-catalog/redhat-marketplace-operator --config ./.osdk-scorecard.yaml -o json > scorecard-output.json
          cat scorecard-output.json | jq -r '.results[] | select(.state == "fail") | "::error" +  "::" + .name + " failed"'
        env:
          VERSION: ${{ steps.vars.outputs.version }}
