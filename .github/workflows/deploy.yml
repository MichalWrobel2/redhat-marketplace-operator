name: Test & Deploy Image

on:
  push:
    branches:
      - 'master'
      - 'release/**'
      - 'hotfix/**'
      - 'develop'
      - 'feature/**'
      - 'bugfix/**'

env:
  pushImage: true

jobs:
  test-unit:
    name: Test
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        registry:
          - 'quay.io/rh-marketplace'
        include:
          - registry: quay.io/rh-marketplace
            name: quay
            key: quayUser
            value: quayPassword
    env:
      IMAGE_REGISTRY: ${{ matrix.registry }}
      OPERATOR_IMAGE: ${{ matrix.registry }}/redhat-marketplace-operator:${{ needs.build.outputs.dockertag }}
      OPERATOR_IMAGE_TAG: ${{ needs.build.outputs.dockertag }}
      TAG: ${{ matrix.registry }}/redhat-marketplace-operator:${{ needs.build.outputs.dockertag}}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ github.token }}

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15
        id: go

      - name: Get if gittag is pushed
        shell: bash {0}
        id: tag
        run: |
          VERSION=$(make current-version)
          RESULT=$(git tag --list | grep -E "$VERSION")
          IS_TAGGED=false
          if [ "$RESULT" != "" ] ; then
            IS_TAGGED=true
          fi

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Cache Go Mod
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Login Docker
        run: make docker-login
        env:
          DOCKER_USER: ${{ secrets.REDHAT_IO_USER }}
          DOCKER_PASSWORD: ${{ secrets.REDHAT_IO_PASSWORD }}
          REGISTRY: registry.redhat.io

      - name: Cache tools
        id: tools
        uses: actions/cache@v2
        with:
          path: |
            testbin
          key: tools-${{ runner.os }}-${{ hashFiles('Makefile') }}

      - name: Install tools
        run: |
          echo "127.0.0.1 localhost" | sudo tee -a /etc/hosts
          make install-tools testbin

      - name: Test Unit
        run: |
          make test-ci-unit

      - uses: actions/upload-artifact@v2
        with:
          name: cover-unit
          path: cover-unit.out

  test-integration:
    name: Test Integration
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        registry:
          - 'quay.io/rh-marketplace'
        include:
          - registry: quay.io/rh-marketplace
            name: quay
            key: quayUser
            value: quayPassword
    env:
      IMAGE_REGISTRY: ${{ matrix.registry }}
      OPERATOR_IMAGE: ${{ matrix.registry }}/redhat-marketplace-operator:${{ needs.build.outputs.dockertag }}
      OPERATOR_IMAGE_TAG: ${{ needs.build.outputs.dockertag }}
      TAG: ${{ matrix.registry }}/redhat-marketplace-operator:${{ needs.build.outputs.dockertag}}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ github.token }}

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15
        id: go

      - name: Get if gittag is pushed
        shell: bash {0}
        id: tag
        run: |
          VERSION=$(make current-version)
          RESULT=$(git tag --list | grep -E "$VERSION")
          IS_TAGGED=false
          if [ "$RESULT" != "" ] ; then
            IS_TAGGED=true
          fi

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Cache Go Mod
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: engineerd/setup-kind@v0.4.0

      - name: Login Docker
        run: make docker-login
        env:
          DOCKER_USER: ${{ secrets.REDHAT_IO_USER }}
          DOCKER_PASSWORD: ${{ secrets.REDHAT_IO_PASSWORD }}
          REGISTRY: registry.redhat.io

      - name: Install tools
        run: |
          echo "127.0.0.1 localhost" | sudo tee -a /etc/hosts
          make install-tools testbin

      - name: Wait for deploy to succeed
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-deploy
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: Deploy Finished
          timeoutSeconds: 1000
          intervalSeconds: 10
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Fail
        if: steps.wait-for-deploy.outputs.conclusion == 'failure'
        run: exit 1

      - name: Load Kind
        run: |
          make load-kind

      - name: Test Integration
        env:
          USE_EXISTING_CLUSTER: true
          KUBEBUILDER_ATTACH_CONTROL_PLANE_OUTPUT: true
        run: |
          make test-ci-int

      - uses: actions/upload-artifact@v2
        with:
          name: cover-int
          path: cover-int.out

  cover:
    name: Cover
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15
        id: go
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
      - name: Report cover
        run: |
          cp cover-int/cover-int.out .
          cp cover-unit/cover-unit.out .
          make test-join test-cover-text
          go tool cover -html=cover.out -o cover.html
      - uses: actions/upload-artifact@v2
        with:
          name: cover
          path: cover.html

  build:
    name: Preset
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.vars.outputs.version }}
      tag: ${{ steps.vars.outputs.tag }}
      hash: ${{ steps.vars.outputs.hash }}
      tagExists: ${{ steps.checktag.outputs.exists }}
      dockertag: ${{ steps.vars.outputs.dockertag }}
      crs: ${{ steps.vars.outputs.crs }}
    env:
      TAGPREFIX: ''
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ github.token }}

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15
        id: go

      - name: Set branch prefix for dev
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        run: |
          echo "TAGPREFIX=dev-" >> $GITHUB_ENV"

      - name: Set branch prefix for fix
        if: github.event_name == 'push' && startsWith(github.ref,'refs/heads/bugfix/')
        run: |
          NAME=$(echo "${{ github.ref }}" | sed 's/refs\/heads\/bugfix\///')
          echo "TAGPREFIX=bugfix-${NAME}-" >> $GITHUB_ENV

      - name: Set branch prefix for feat
        if: github.event_name == 'push' && startsWith(github.ref,'refs/heads/feature/')
        run: |
          NAME=$(echo "${{ github.ref }}" | sed 's/refs\/heads\/feature\///')
          echo "TAGPREFIX=feat-${NAME}-" >> $GITHUB_ENV

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get Vars
        id: vars
        run: |
          echo "::set-output name=version::$(make current-version)"
          echo "::set-output name=tag::sha-$(git rev-parse --short HEAD)"
          echo "::set-output name=hash::$(make current-version)-${FILEHASH:0:6}"
          echo "::set-output name=dockertag::${TAGPREFIX}$(make current-version)-${GITHUB_SHA::8}"
        env:
          FILEHASH: ${{ hashFiles('cmd/**', 'pkg/**', 'interal/**', 'version/**', 'go.sum', 'go.mod') }}

      - name: Turnstyle
        uses: softprops/turnstyle@v1
        with:
          continue-after-seconds: 45
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if tag exists
        id: checktag
        shell: bash {0}
        run: |
          skopeo inspect docker://${TAG} > /dev/null
          ([[ $? == 0 ]] && echo "exists=true" || echo "exists=false") >> $GITHUB_ENV
        env:
          TAG: quay.io/rh-marketplace/redhat-marketplace-operator:${{ steps.vars.outputs.dockertag }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        image:
          - redhat-marketplace-operator
          - redhat-marketplace-reporter
          - redhat-marketplace-metric-state
          - redhat-marketplace-authcheck
    env:
      IMAGE_REGISTRY: quay.io/rh-marketplace
      REGISTRY: quay.io/rh-marketplace
      OPERATOR_IMAGE_TAG: ${{ needs.build.outputs.dockertag }}
      BUILD_IMAGE: ${{ matrix.image }}
      TAG: quay.io/rh-marketplace/${{ matrix.image }}:${{ needs.build.outputs.dockertag }}
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Turnstyle
        uses: softprops/turnstyle@v1
        with:
          continue-after-seconds: 45
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Go Mod
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Check if tag exists
        id: image
        shell: bash {0}
        run: |
          skopeo inspect docker://${TAG} --creds ${{ secrets['quayUser'] }}:${{ secrets['quayPassword'] }} > /dev/null
          ([[ $? == 0 ]] && echo "exists=true" || echo "exists=false") >> $GITHUB_ENV

      - name: Install tools
        run: |
          make install-tools
        env:
          SKAFFOLD_VERSION: v1.14.0

      - name: Login ${{ matrix.name }}
        run: make docker-login
        env:
          DOCKER_USER: ${{ secrets['quayUser'] }}
          DOCKER_PASSWORD: ${{ secrets['quayPassword'] }}

      - name: Build & Push
        if: env.exists != 'true'
        run: make build

  deploy-done:
    needs: [deploy]
    runs-on: ubuntu-latest
    name: 'Deploy Finished'
    steps:
      - name: Finished
        run: |
          echo "done"

  opm:
    name: Deploy OPM Index
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        channel:
          - stable
          - beta
        include:
          - channel: beta
            packageName: redhat-marketplace-operator-test
            imageRegistry: quay.io/rh-marketplace
            olmRepo: quay.io/rh-marketplace/redhat-marketplace-operator-test-manifest
            indexRepo: quay.io/rh-marketplace/redhat-marketplace-operator-test-index
            name: quay
            key: quayUser
            value: quayPassword
          - channel: stable
            packageName: redhat-marketplace-operator
            imageRegistry: quay.io/rh-marketplace
            olmRepo: quay.io/rh-marketplace/redhat-marketplace-operator-manifest
            indexRepo: quay.io/rh-marketplace/redhat-marketplace-operator-bundle
            name: quay
            key: quayUser
            value: quayPassword
    env:
      IMAGE_REGISTRY: ${{ matrix.imageRegistry }}
      OLM_REPO: ${{ matrix.olmRepo }}
      OLM_BUNDLE_REPO: ${{ matrix.indexRepo }}
      TAG: ${{ needs.build.outputs.dockertag }}
      OPERATOR_IMAGE_TAG: ${{ needs.build.outputs.dockertag }}
      VERSION: ${{ needs.build.outputs.version }}
      OLM_PACKAGE_NAME: ${{ matrix.packageName }}
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15
        id: go

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Install operator-sdk
        run: |
          make install-tools
          python -m pip install --upgrade pip
          pip3 install -Iv operator-courier==$COURIER_VERSION
          sudo apt-get install -y sed
          sudo snap install yq
          echo "`pwd`/testbin/bin" >> $GITHUB_PATH
        env:
          operator_sdk_version: v0.18.0
          opm_version: v1.12.5
          COURIER_VERSION: 2.1.7

      - name: Login ${{ matrix.name }}
        run: make docker-login
        env:
          DOCKER_USER: ${{ secrets[matrix.key] }}
          DOCKER_PASSWORD: ${{ secrets[matrix.value] }}
          REGISTRY: ${{ matrix.registry }}

      - name: Build bundles ${{ matrix.channel }}
        run: |
          make generate-csv opm-bundle-last-${{ matrix.channel }} opm-index-base
          yq w ./deploy/olm-catalog/test-registry.yaml spec.image "${OLM_BUNDLE_REPO}:${TAG}" > ./registry-${{ matrix.channel }}${TAG}.yaml

      - name: Upload results
        uses: actions/upload-artifact@v1
        with:
          name: ${{}}catalog-source-${{ matrix.channel }}
          path: ./test-registry-${{ matrix.channel }}-${{ env.TAG }}.yaml

  tag:
    name: Push other tags
    runs-on: ubuntu-latest
    needs: [build, deploy, opm]
    if: |
      github.event_name == 'push'
      && (startsWith(github.ref,'refs/heads/release/')
          || startsWith(github.ref,'refs/heads/hotfix/')
          || github.ref == 'refs/heads/master' )
    strategy:
      matrix:
        image:
          - redhat-marketplace-operator
          - redhat-marketplace-reporter
          - redhat-marketplace-metric-state
          - redhat-marketplace-authcheck
          - redhat-marketplace-operator-manifest
        include:
          - image: redhat-marketplace-operator
            registry: scan.connect.redhat.com/ospid-c93f69b6-cb04-437b-89d6-e5220ce643cd
            fromRegistry: quay.io/rh-marketplace
            name: PC
            key: pcUser
            value: pcPassword
          - image: redhat-marketplace-reporter
            registry: scan.connect.redhat.com/ospid-faa0f295-e195-4bcc-a3fc-a4b97ada317e
            fromRegistry: quay.io/rh-marketplace
            name: PC
            key: pcUser
            value: pcPasswordReporter
          - image: redhat-marketplace-metric-state
            registry: scan.connect.redhat.com/ospid-9b9b0dbe-7adc-448e-9385-a556714a09c4
            fromRegistry: quay.io/rh-marketplace
            name: PC
            key: pcUser
            value: pcPasswordMetricState
          - image: redhat-marketplace-authcheck
            registry: scan.connect.redhat.com/ospid-ffed416e-c18d-4b88-8660-f586a4792785
            fromRegistry: quay.io/rh-marketplace
            name: PC
            key: pcUser
            value: pcPasswordAuthCheck
          - image: redhat-marketplace-operator-manifest
            registry: scan.connect.redhat.com/ospid-64f06656-d9d4-43ef-a227-3b9c198800a1
            fromRegistry: quay.io/rh-marketplace
            name: PC
            key: pcUser
            value: pcPasswordOperatorManifest
    env:
      FROM_OPERATOR_IMAGE: ${{ matrix.fromRegistry }}/${{ matrix.image }}:${{ needs.build.outputs.dockertag }}
      TO_OPERATOR_IMAGE: ${{ matrix.registry }}/${{ matrix.image }}:${{ needs.build.outputs.dockertag }}
      TAG: ${{ matrix.registry }}/${{ matrix.image }}:${{ needs.build.outputs.dockertag }}
    steps:
      - name: Check if tag exists in ${{ matrix.name }}
        id: image
        shell: bash {0}
        run: |
          skopeo inspect docker://${TAG} --creds ${{ secrets[matrix.key] }}:${{ secrets[matrix.value] }} > /dev/null
          ([[ $? == 0 ]] && echo "exists=true" || echo "exists=false") >> $GITHUB_ENV

      - name: Copy ${{ matrix.image }} to ${{ matrix.name }}
        if: env.exists != 'true' && env.pushImage == 'true'
        run: |
          skopeo copy "docker://${FROM_OPERATOR_IMAGE}" "docker://${TO_OPERATOR_IMAGE}" --dest-creds ${{ secrets[matrix.key] }}:${{ secrets[matrix.value] }}

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [cover]
    env:
      TAG: ${{ needs.build.outputs.dockertag }}
      OS_PIDS: "ospid-c93f69b6-cb04-437b-89d6-e5220ce643cd ospid-faa0f295-e195-4bcc-a3fc-a4b97ada317e ospid-9b9b0dbe-7adc-448e-9385-a556714a09c4 ospid-ffed416e-c18d-4b88-8660-f586a4792785"
      REPOS: "redhat-marketplace-operator redhat-marketplace-reporter redhat-marketplace-metric-state redhat-marketplace-authcheck"
      RH_CONNECT_TOKEN: ${{ secrets.redhat_api_key }}
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15
        id: go
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Publish
        run: |
          make wait-and-publish
