// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package metric_server

import (
	"github.com/redhat-marketplace/redhat-marketplace-operator/pkg/controller"
	"github.com/redhat-marketplace/redhat-marketplace-operator/pkg/managers"
	"github.com/redhat-marketplace/redhat-marketplace-operator/pkg/utils/reconcileutils"
	"k8s.io/client-go/kubernetes"
	"sigs.k8s.io/controller-runtime/pkg/client/config"
)

import (
	_ "k8s.io/client-go/plugin/pkg/client/auth"
)

// Injectors from wire.go:

func NewServer(opts *Options) (*Service, error) {
	restConfig, err := config.GetConfig()
	if err != nil {
		return nil, err
	}
	restMapper, err := managers.NewDynamicRESTMapper(restConfig)
	if err != nil {
		return nil, err
	}
	opsSrcSchemeDefinition := controller.ProvideOpsSrcScheme()
	monitoringSchemeDefinition := controller.ProvideMonitoringScheme()
	olmV1SchemeDefinition := controller.ProvideOLMV1Scheme()
	olmV1Alpha1SchemeDefinition := controller.ProvideOLMV1Alpha1Scheme()
	localSchemes := controller.ProvideLocalSchemes(opsSrcSchemeDefinition, monitoringSchemeDefinition, olmV1SchemeDefinition, olmV1Alpha1SchemeDefinition)
	scheme, err := managers.ProvideScheme(restConfig, localSchemes)
	if err != nil {
		return nil, err
	}
	clientOptions := getClientOptions()
	cache, err := managers.ProvideNewCache(restConfig, restMapper, scheme, clientOptions)
	if err != nil {
		return nil, err
	}
	client, err := managers.ProvideClient(restConfig, restMapper, scheme, cache, clientOptions)
	if err != nil {
		return nil, err
	}
	clientset, err := kubernetes.NewForConfig(restConfig)
	if err != nil {
		return nil, err
	}
	options := ConvertOptions(opts)
	registry := provideRegistry()
	logger := _wireLoggerValue
	clientCommandRunner := reconcileutils.NewClientCommand(client, scheme, logger)
	service := &Service{
		k8sclient:       client,
		k8sRestClient:   clientset,
		opts:            options,
		cache:           cache,
		metricsRegistry: registry,
		cc:              clientCommandRunner,
	}
	return service, nil
}

var (
	_wireLoggerValue = log
)
