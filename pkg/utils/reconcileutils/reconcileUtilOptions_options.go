package reconcileutils

// Code generated by github.com/launchdarkly/go-options.  DO NOT EDIT.

import (
	"k8s.io/apimachinery/pkg/runtime"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"
)

type ApplyReconcileOptionFunc func(c *reconcileUtilOptions) error

func (f ApplyReconcileOptionFunc) apply(c *reconcileUtilOptions) error {
	return f(c)
}

func newReconcileUtilOptions(options ...ReconcileOption) (reconcileUtilOptions, error) {
	var c reconcileUtilOptions
	err := applyReconcileUtilOptionsOptions(&c, options...)
	return c, err
}

func applyReconcileUtilOptionsOptions(c *reconcileUtilOptions, options ...ReconcileOption) error {
	for _, o := range options {
		if err := o.apply(c); err != nil {
			return err
		}
	}
	return nil
}

type ReconcileOption interface {
	apply(*reconcileUtilOptions) error
}

func WithIfNil(o boolean) ApplyReconcileOptionFunc {
	return func(c *reconcileUtilOptions) error {
		c.IfNil = o
		return nil
	}
}

func WithAddOwner(o ReconcilerUtilFunc) ApplyReconcileOptionFunc {
	return func(c *reconcileUtilOptions) error {
		c.AddOwner = o
		return nil
	}
}

func WithPatchChecker(o boolean) ApplyReconcileOptionFunc {
	return func(c *reconcileUtilOptions) error {
		c.PatchChecker = o
		return nil
	}
}

func WithIgnoreNotFound(o boolean) ApplyReconcileOptionFunc {
	return func(c *reconcileUtilOptions) error {
		c.IgnoreNotFound = o
		return nil
	}
}

func WithNewInstance(o runtime.Object) ApplyReconcileOptionFunc {
	return func(c *reconcileUtilOptions) error {
		c.NewInstance = o
		return nil
	}
}
